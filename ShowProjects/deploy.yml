apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: p1-list
  name: p1-list
  namespace: {DEVOPS_NAMESPACE}

---

apiVersion: rbac.authorization.k8s.io/v1

kind: ClusterRole
metadata:
  labels:
    app: p1-list
  name: p1-list-role
  namespace: {DEVOPS_NAMESPACE}
rules:
  - apiGroups:
    - "apps"
    resources:
    - deployments
    - daemonsets
    - statefulsets
    - ingresses
    verbs:
    - list
    - get
    - watch
  - apiGroups:
    - "extensions"
    resources:
    - ingresses
    verbs:
    - list
    - get
    - watch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: p1-list
  name: p1-list-binding
  namespace: {DEVOPS_NAMESPACE}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: p1-list-role
subjects:
  - kind: ServiceAccount
    name: p1-list
    namespace: {DEVOPS_NAMESPACE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: p1-list
  namespace: {DEVOPS_NAMESPACE}
  labels:
    project: p1-list
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: p1-list
  template:
    metadata:
      labels:
        app: p1-list
        project: p1-list
    spec:
      serviceAccountName: p1-list
      imagePullSecrets:
      - name: harbor
      containers:
      - name: p1-list
        image: {IMAGE}
        env:
        - name: NAMESPACES
          value: {NAMESPACES}
        - name: LABEL1
          value: "test1-"
        - name: LABEL2
          value: "test2-"
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        imagePullPolicy: Always
        resources:
          requests:
            memory: "50Mi"
            cpu: "10m"
          limits:
            memory: "150Mi"
            cpu: "100m"
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: p1-list
  namespace: {DEVOPS_NAMESPACE}
  labels:
    project: p1-list
spec:
  selector:
    app: p1-list
  ports:
  - protocol: TCP
    port: 80
    name: http

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: p1-list
  namespace: {DEVOPS_NAMESPACE}
  labels:
    project: p1-list
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: >-
      {IPs}
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: basic-auth-p1-list
spec:
  tls:
  - hosts:
    - {HOST}
    secretName: p1-list-tls
  rules:
  - host: {HOST}
    http:
      paths:
      - path: /
        backend:
          serviceName: p1-list
          servicePort: 80
